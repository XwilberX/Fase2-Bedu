install.packages("shiny")
2+2
2*2
clear
clear;
print('Hola mundo con R')
10000000
10000^100
?mean
x <- matrix(1 : 9, byrow = TRUE, nrow = 3)
View(x)
View(x)
View(x)
View(x)
?max
max(100/4, 108/5, 200/20, sqrt(81), 35, na.rm = FALSE)
library(readr)
rows <- read_csv("https://data.montgomerycountymd.gov/api/views/2qd6-mr43/rows.csv")
View(rows)
install.packages("readr")
install.packages("readr")
BankChurners.csv <- read.csv("C:/Users/infrabyte/Downloads/BankChurners.csv.zip", sep="")
View(BankChurners.csv)
resultado <- ((43012180)+10)/4.1
install.packages(“ggplot2”)
install.packages("ggplot2")
install.packages("dplyr")
mean(c[5,7])
mean(c[5,7])
?mean
mean(c[5,7], na.rm = FALSE)
mean(x)
mean(c[5,7])
?builtin
mean(x)
library(ggplot2)
library(ggplot2)
mean(5,7)
mean(x)
mean(c(5,7))
mean(c(9))
source('~/.active-rstudio-document', echo=TRUE)
x <- 5
2 * x + 3
pais <- "Colombia"
nchar(pais)
conf <- read.csv("st19ncov-confirmados.csv")
mu <- read.csv("st19ncov-muertes.csv")
# Eliminamos la primer fila
Sconf <- conf[-1, ]
Smu <- mu[-1, ]
summary(Sconf)
Sconf <- select(Sconf, Country.Region, Date, Value) # País,
Sconf <- rename(Sconf, Country = Country.Region, Infectados = Value) # Cambiamos el nombre de las variables
Sconf <- mutate(Sconf, Date = as.Date(Date, "%Y-%m-%d"), Infectados = as.numeric(Infectados)) # Transformamos la variable
# Seleccionamos país, fecha y acumulado de muertos
Smu <- select(Smu, Country.Region, Date, Value)
Smu <- rename(Smu, Country = Country.Region, Muertos = Value) # Renombramos
Smu <- mutate(Smu, Date = as.Date(Date, "%Y-%m-%d"), Muertos = as.numeric(Muertos)) # Transformamos
# Unimos infectados y muertos acumulados para cada fecha
Scm <- merge(Sconf, Smu)
mex <- filter(Scm, Country == "Mexico") # Seleccionamos sólo a México
mex <- filter(mex, Infectados != 0) # Comienzan los infectados en México
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por día
mex <- mutate(mex, NM = c(0, diff(Muertos))) # Nuevos muertos por día
mex <- mutate(mex, Letalidad = round(Muertos/Infectados*100, 1)) # Tasa de letalidad
mex <- mutate(mex, IDA = lag(Infectados), MDA = lag(Muertos)) # Valores día anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCM = Muertos/MDA) # Factores de Crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Días de contingencia
conf <- read.csv("st19ncov-confirmados.csv")
mu <- read.csv("st19ncov-muertes.csv")
# Eliminamos la primer fila
Sconf <- conf[-1, ]
Smu <- mu[-1, ]
summary(Sconf)
Sconf <- select(Sconf, Country.Region, Date, Value) # País,
Sconf <- rename(Sconf, Country = Country.Region, Infectados = Value) # Cambiamos el nombre de las variables
Sconf <- mutate(Sconf, Date = as.Date(Date, "%Y-%m-%d"), Infectados = as.numeric(Infectados)) # Transformamos la variable
# Seleccionamos país, fecha y acumulado de muertos
Smu <- select(Smu, Country.Region, Date, Value)
Smu <- rename(Smu, Country = Country.Region, Muertos = Value) # Renombramos
Smu <- mutate(Smu, Date = as.Date(Date, "%Y-%m-%d"), Muertos = as.numeric(Muertos)) # Transformamos
# Unimos infectados y muertos acumulados para cada fecha
Scm <- merge(Sconf, Smu)
mex <- filter(Scm, Country == "Mexico") # Seleccionamos sólo a México
mex <- filter(mex, Infectados != 0) # Comienzan los infectados en México
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por día
mex <- mutate(mex, NM = c(0, diff(Muertos))) # Nuevos muertos por día
mex <- mutate(mex, Letalidad = round(Muertos/Infectados*100, 1)) # Tasa de letalidad
mex <- mutate(mex, IDA = lag(Infectados), MDA = lag(Muertos)) # Valores día anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCM = Muertos/MDA) # Factores de Crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Días de contingencia
conf <- read.csv("st19ncov-confirmados.csv")
?table
install.packages("xml2")
data <- read_xml("	http://201.116.60.29/servicios/api/Ambiental/AguaRenovableEDO/2019")
install.packages("XML")
url <- "http://201.116.60.29/servicios/api/Ambiental/AguaRenovableEDO/2019"
library(XML)
bm  <- read_xml("http://api.worldbank.org/countries/all/indicators/NY.GDP.MKTP.CD?date=2009:2010&per_page=500&page=1")
library(xml2)
bm  <- read_xml("http://api.worldbank.org/countries/all/indicators/NY.GDP.MKTP.CD?date=2009:2010&per_page=500&page=1")
View(bm)
esp <- xml_find_all(bm, "//*/wb:data[wb:country[@id='ES']]/wb:value")
View(esp)
as.numeric(xml_text(esp))
library("methods")
url <- "http://201.116.60.29/servicios/api/Ambiental/AguaRenovableEDO/2019"
library(XML)
library("methods")
library(XML)
data <- xmlParse(file = url)
data
print(data)
class(data)
dfdata <- xmlToDataFrame(data)
View(dfdata)
print(dfdata)
print(dfdata[1])
print(dfdata[[1]])
print(dfdata[,1])
print(dfdata[1])
# Obteniendo datos de calidad del aire en JSON
url2 <- "https://api.datos.gob.mx/v1/calidadAire"
install.packages("jsonlite")
library(jsonlite)3
library(jsonlite)
data2 <- fromJSON(url2)
install.packages("curl")
data2 <- fromJSON(url2)
class(data2)
View(data2)
data2$results$stations
View(data2$results$stations)
# Obteniendo datos de calidad del aire en JSON
url2 <- "https://api.datos.gob.mx/v2/sinaica"
data2 <- fromJSON(url2)
data2
View(data2)
View(data2$results)
data2 <- data2$results
View(data2)
# Obteniendo datos de calidad del agua en XML a DF
url <- "http://201.116.60.29/servicios/api/Ambiental/AguaRenovableEDO/2019"
data <- xmlParse(file = url)
dfdata <- xmlToDataFrame(data)
View(dfdata)
install.packages(“languageserver”)
install.packages("languageserver")
setwd("~/Github/Fase2-Bedu/Sesion3/files")
library(dplyr)
library(ggplot2)
lista2 <- lapply(dir(pattern = ".csv"), read.csv)
lista2 <- lapply(lista2, select, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
lista2<- lapply(lista2, mutate,Date=as.Date(Date, "%d/%m/%y"))
data2 <- do.call(rbind, lista2)
##Leer los datos de goles anotados por equipos de casa (FTHG) y por equipos visitantes (FTAG)
FTHG<-data2$FTHG
FTAG<-data2$FTAG
##La probabilidad de que un equipo de casa anote x goles
Prob_FTHG<-table(FTHG)/length(FTHG)
##La probabilidad de que un equipo visitante anote x goles
Prob_FTHG<-table(FTAG)/length(FTAG)
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del equipo local
Prob_Conjunta<-table(as.data.frame(cbind(FTHG,FTAG)))/length(FTAG)
a <- function(n){n/(Prob_FTHG*Prob_FTHG)}
conjunta2 <- apply(Prob_Conjunta, 1, a)
conjunta2
apply(Prob_Conjunta, 1, a)
Prob_Conjunta
Prob_FTHG
Prob_FTHG
Prob_FTHG<-table(FTHG)/length(FTHG)
##La probabilidad de que un equipo visitante anote x goles
Prob_FTAG<-table(FTAG)/length(FTAG)
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del
for (i in c(1:ncol(Prob_Conjunta))){
#print(i)
Prob_Conjunta[,i]<-Prob_Conjunta[,i]/Prob_FTHG
}
for (i in c(1:nrow(Prob_Conjunta))){
#print(i)
Prob_Conjunta[i,]<-Prob_Conjunta[i,]/Prob_FTAG
}
Prob_Conjunta
Prob_FTHG
Prob_FTAG
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del
a<-function(n){n/Prob_FTHG}
Prob_Conjunta_2<-apply(Prob_Conjunta, 2, a)
b<-function(n){n/Prob_FTAG}
Prob_Conjunta_2<-apply(Prob_Conjunta_2, 1, b)
Prob_Conjunta_2
Prob_Conjunta
Prob_FTHG<-table(FTHG)/length(FTHG)
Prob_FTHG
Prob_FTAG
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del
a<-function(n){n/Prob_FTHG}
Prob_Conjunta_2<-apply(Prob_Conjunta, 2, a)
b<-function(n){n/Prob_FTAG}
Prob_Conjunta_2<-apply(Prob_Conjunta_2, 1, b)
Prob_Conjunta_2
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del equipo local
Prob_Conjunta<-table(as.data.frame(cbind(FTHG,FTAG)))/length(FTAG)
Prob_Conjunta
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del
a<-function(n){n/Prob_FTHG}
Prob_Conjunta_2<-apply(Prob_Conjunta, 2, a)
b<-function(n){n/Prob_FTAG}
Prob_Conjunta_2<-apply(Prob_Conjunta_2, 1, b)
Prob_Conjunta_2
install.packages("rsample")
library(rsample)
set.seed(4892)
conjunto_boot <- lapply(1:20, function(i) sample(Prob_Conjunta_2, replace = T))
View(conjunto_boot)
conjunto_boot[1]
hist(conjunto_boot)
hist(conjunto_boot[1])
as.data.frame(as.table(Prob_Conjunta_2))
conjunto_boot[1]
Prob_Conjunta_2
for(i in 1:100){
conjunto_boot[i] <- mean(Prob_Conjunta_2[sample(1:length(Prob_Conjunta_2), 40, replace = T)])
}
View(Prob_Conjunta_2)
View(conjunta2)
View(conjunto_boot)
qplot(conjunto_boot, geom = "histogram") + geom_vline(xintercept = mean(conjunto_boot))
qplot(conjunto_boot, geom = "histogram")
conjunto_boot
lista2 <- lapply(dir(pattern = ".csv"), read.csv)
lista2 <- lapply(lista2, select, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
lista2<- lapply(lista2, mutate,Date=as.Date(Date, "%d/%m/%y"))
data2 <- do.call(rbind, lista2)
##Leer los datos de goles anotados por equipos de casa (FTHG) y por equipos visitantes (FTAG)
FTHG<-data2$FTHG
FTAG<-data2$FTAG
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del equipo local
Prob_Conjunta<-table(as.data.frame(cbind(FTHG,FTAG)))/length(FTAG)
Prob_FTHG<-table(FTHG)/length(FTHG)
##La probabilidad de que un equipo visitante anote x goles
Prob_FTAG<-table(FTAG)/length(FTAG)
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del equipo local
Prob_Conjunta<-table(as.data.frame(cbind(FTHG,FTAG)))/length(FTAG)
Prob_FTHG<-table(FTHG)/length(FTHG)
##La probabilidad de que un equipo visitante anote x goles
Prob_FTAG<-table(FTAG)/length(FTAG)
##La probabilidad de que un equpo de casa anote x1 goles y el equipo visitante anote x2 goles
#Columnas con los goles del equipo visitante y las filas los goles del
a<-function(n){n/Prob_FTHG}
Prob_Conjunta_2<-apply(Prob_Conjunta, 2, a)
b<-function(n){n/Prob_FTAG}
Prob_Conjunta_2<-apply(Prob_Conjunta_2, 1, b)
Prob_Conjunta_2
for(i in 1:100){
conjunto_boot[i] <- mean(Prob_Conjunta_2[sample(1:length(Prob_Conjunta_2), 100, replace = T)])
}
conjunto_boot = c[]
conjunto_boot = c()
for(i in 1:100){
conjunto_boot[i] <- mean(Prob_Conjunta_2[sample(1:length(Prob_Conjunta_2), 100, replace = T)])
}
conjunto_boot
qplot(conjunto_boot, geom = "histogram") + geom_vline(xintercept = mean(conjunto_boot))
for(i in 1:1000){
conjunto_boot[i] <- mean(Prob_Conjunta_2[sample(1:length(Prob_Conjunta_2), 100, replace = T)])
}
conjunto_boot
qplot(conjunto_boot, geom = "histogram") + geom_vline(xintercept = mean(conjunto_boot))
View(conjunto_boot)
qplot(Prob_Conjunta_2, geom = "histogram") + geom_vline(xintercept = mean(Prob_Conjunta_2))
qplot(conjunto_boot, geom = "histogram") + geom_vline(xintercept = mean(conjunto_boot))
qplot(Prob_Conjunta_2, geom = "histogram") + geom_vline(xintercept = mean(Prob_Conjunta_2))
qplot(conjunto_boot, geom = "histogram") + geom_vline(xintercept = mean(conjunto_boot))
dir()
SmallData <- read.csv("ProbConjunta", header = T)
